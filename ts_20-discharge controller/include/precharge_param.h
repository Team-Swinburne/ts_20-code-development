// PINOUT
#define PIN_SERIAL_TX PA_2
#define PIN_SERIAL_RX PA_3

#define PIN_I2C_SDA PB_7
#define PIN_I2C_SCL PB_6

#define PIN_CAN1_RXD PB_8
#define PIN_CAN1_TXD PB_9

#define PIN_HEART_LED1 PC_13
#define PIN_PCB_TEMP PA_0

#define PIN_AMS_OK PB_13
#define PIN_PDOC_OK PB_15
#define PIN_IMD_OK PB_12
#define PIN_IMD_DATA PA_15

#define PIN_AIR_POWER PB_3

#define PIN_PRECHARGE_RELAY PA_9
#define PIN_AIR_NEG_RELAY PA_8
#define PIN_AIR_NEG_RELAY_FB PB_10
#define PIN_AIR_POS_RELAY PA_10
#define PIN_AIR_POS_RELAY_FB PB_11

#define PIN_CAN1_RX_LED PB_1
#define PIN_CAN1_TX_LED PB_0

//-----------------------------------------------
// Precharge States
//-----------------------------------------------

typedef enum PREcHARGE_STATES {
	PRECHARGE_STATE_FAIL,
	PRECHARGE_STATE_IDLE,
	PRECHARGE_STATE_PRECHARGING,
	PRECHARGE_STATE_PRECHARGING_TIMER,
	PRECHARGE_STATE_PRECHARGED,
	PRECHARGE_STATE_DRIVE,
} precharge_states_t;

//-----------------------------------------------
// TS_STD_CAN_INTERPRETATIONS
//-----------------------------------------------

typedef enum CAN_ERROR_WARNING_SIGNALS{
	CAN_ERROR_1,
	CAN_ERROR_2,
	CAN_WARNING_1,
	CAN_WARNING_2,
	CAN_AMS_OK,
	CAN_PDOC_OK,
	CAN_IMD_OK,
	CAN_ERROR_SPARE,
} can_error_warning_flag_t;

typedef enum CAN_ANALOGUE_1_SIGNALS{
	CAN_ANALOGUE_1_PDOC_TEMPERATURE_1,
	CAN_ANALOGUE_1_PDOC_TEMPERATURE_2,
	CAN_ANALOGUE_1_PDOC_REF_TEMPERATURE_1,
	CAN_ANALOGUE_1_PDOC_REF_TEMPERATURE_2,
	CAN_ANALOGUE_1_HV_MC_SENSE_VOLTAGE_1,
	CAN_ANALOGUE_1_HV_MC_SENSE_VOLTAGE_2,
	CAN_ANALOGUE_1_HV_BATTERY_SENSE_VOLTAGE_1,
	CAN_ANALOGUE_1_HV_BATTERY_SENSE_VOLTAGE_2,
} can_analogue_1_signals_t;

typedef enum CAN_ANALOGUE_2_SIGNALS{
	CAN_ANALOGUE_2_IMD_PERIOD,
	CAN_ANALOGUE_2_IMD_FREQUENCY,
	CAN_ANALOGUE_2_IMD_DUTY_CYCLE,
	CAN_ANALOGUE_2_SPARE_3,
	CAN_ANALOGUE_2_SPARE_4,
	CAN_ANALOGUE_2_SPARE_5,
	CAN_ANALOGUE_2_SPARE_6,
	CAN_ANALOGUE_2_SPARE_7,
} can_analogue_2_signals_t;

typedef enum CAN_DIGITAL_1_SIGNALS{
	CAN_DIGITAL_1_AIR_POWER,
	CAN_DIGITAL_1_AIR_NEG_RELAY,
	CAN_DIGITAL_1_AIR_NEG_FEEDBACK,
	CAN_DIGITAL_1_AIR_POS_RELAY,
	CAN_DIGITAL_1_AIR_POS_FEEDBACK,
	CAN_DIGITAL_1_PRECHARGE_RELAY,
	CAN_DIGITAL_1_SPARE_6,
	CAN_DIGITAL_1_SPARE_7,
} can_digital_1_signals_t;


//-----------------------------------------------
// Error/Warning Flags
//-----------------------------------------------

typedef enum ERROR_CODES_SUB_KEY {
  ERROR_AMS_FAIL,
  ERROR_PDOC_FAIL,
  ERROR_IMD_FAIL,
  ERROR_ORION_TIMEOUT,
  ERROR_ORION_LOW_VOTLAGE,
  ERROR_ORION_HIGH_VOLTAGE,
  ERROR_ORION_OVERTEMPERATURE,
  ERROR_PERIPHERALS,
} error_state_t;

typedef enum WARNING_CODES_SUB_KEY {
  WARNING_PCB_OVERTEMPERATURE,
  WARNING_DISCHARGE_PRECHARGE_MISMATCH,
  WARNING_AIR_NEG_FEEDBACK_MISMATCH,
  WARNING_AIR_POS_FEEDBACK_MISMATCH,
  WARNING_PDOC_SENSOR_FAILURE,
  WARNING_MC_ADC_SENSOR_FAILURE,
  WARNING_BATT_ADC_SENSOR_FAILURE,
  WARNING_PDOC_RELAY_FAILURE,
} warning_state_t;
