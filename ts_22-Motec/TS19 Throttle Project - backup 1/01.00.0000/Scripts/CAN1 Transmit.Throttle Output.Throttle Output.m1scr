local h = CanComms.TxOpen(true); 	//false for little endian, true for big endian

CanComms.TxInitialise(h, 4); 		//Initialise the message, specify the length of the message in bytes
CanComms.SetUnsignedInteger(h, 0, 8, Convert.ToUnsignedInteger(RTDS)); //Need to convert to an unsignedinteger before transmitting
CanComms.SetUnsignedInteger(h, 8, 8, Convert.ToUnsignedInteger(Precharge Button Pressed));
CanComms.SetUnsignedInteger(h, 16, 8, Convert.ToUnsignedInteger(Drive Button Pressed));
CanComms.SetUnsignedInteger(h, 24, 8, Convert.ToUnsignedInteger(Read Sensors.APPS Sensors.APPS Average Percentage));

if (CanComms.TxStandard(h,0,0x306))
{
	Throttle Output TX Status = Throttle Output TX Status.OK;
}
else
{
	Throttle Output TX Status = Throttle Output TX Status.Transmit Warning;
}