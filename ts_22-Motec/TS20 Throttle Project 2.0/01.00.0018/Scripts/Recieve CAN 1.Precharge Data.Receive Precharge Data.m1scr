//Your Scheduled Function Events should execute faster than the transmission speed of the CAN message
//or you may miss messages

/*
RxOpenStandard Argument
bus CAN bus 
match CAN id bits to match 
mask CAN id bits to ignore 
bigendian true for big endian, false for little endian 
*/
local h = CanComms.RxOpenStandard(0, 0x301, 0x0, true);

//If message has been received on CAN id 0x301
if (CanComms.RxMessage(h)) {
	
	Precharge Current State = CanComms.GetInteger(h, 0, 8); //Assign the received bytes to a channel
	Precharge Error Critical = CanComms.GetInteger(h, 8, 8);
	Precharge Error Isolation Fault = CanComms.GetInteger(h, 16, 8);
	
	if (Precharge Current State >= 1 and Precharge Current State < 7) {
		if ((Transmit CAN 1.Throttle Output.Precharge Button Pressed eq 1) or Transmit CAN 1.Throttle Output.Drive Button Pressed eq 1) {
			Transmit CAN 1.Heartbeat.Heartbeat State = 2;
		} else if (Transmit CAN 1.Heartbeat.Heartbeat State eq 0) {
			Transmit CAN 1.Heartbeat.Heartbeat State = 1;
		} else {
		Transmit CAN 1.Heartbeat.Heartbeat State = 0;
		}
	}
		
}
else if ((System.TicksSince(Recieve CAN 1.Ticks) * System.TickPeriod()) >= CAN.CAN Timeout Delay) {
}